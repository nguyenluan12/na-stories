// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model lesson_cloze {
    id     String  @id @default(cuid())
    title  String
    lesson Json?
    img    String?
}

model lesson_listen_read {
    id     String  @id @default(cuid())
    title  String
    lesson Json?
    img    String?
}

model dictation {
    id     String  @id @default(cuid())
    title  String
    lesson Json?
    img    String?
}

model review {
    userId    String   @id
    userEmail String
    type      String
    title     String
    time      DateTime @updatedAt
}

// model User {
//     id            Int       @id @default(autoincrement())
//     name          String?
//     email         String    @unique
//     emailVerified DateTime?
//     image         String?
//     password      String
//     createdAt     DateTime  @default(now())
//     updatedAt     DateTime  @updatedAt
// }

model audio {
    id       String  @id @default(cuid())
    audioUrl String?
}

model User {
    id          String    @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
    email       String    @unique
    name        String?
    password    String?
    avatar      String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    phoneNumber String?
    date        String?
    Account     Account[]
    Session     Session[]
}

model storyGenerated {
    id        String @id @default(cuid())
    title     String
    content   String
    translate String
    ask       Json
}

// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     provider          String
//     providerAccountId String
//     type              String
//     access_token      String?
//     token_type        String?
//     scope             String?
//     id_token          String?
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id])
// }

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     phoneNumber   String?
//     date          String?
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
